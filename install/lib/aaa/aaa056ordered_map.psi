
interface PSL::Containers::Ordered_Map
  <Key_Type is Comparable<>; Value_Type is Assignable<>> is
  // An ordered map module, allowing iterating over the keys in
  // forward or reverse order.

    interface Pair<> extends Key_Value<Key_Type, Value_Type> is
       op "=?"(Left, Right : Pair) -> Ordering is (Left.Key =? Right.Key)
    end interface Pair

    op "[]"() -> Ordered_Map

    op "|="(var Left : Ordered_Map; Right : Pair)
        // Add Key=>Value to Map, replacing pre-existing mapping
        // for Key, if any.

    op "|"(Left : Ordered_Map; Right : Pair) -> Ordered_Map
        // Add Key=>Value to Map, replacing pre-existing mapping
        // for Key, if any in result.

    op "<|="(var Left : Ordered_Map; var Right : optional Pair)
        // Move Key/Value pair into map, leaving Right null

    op "<|="(var Left : Ordered_Map; var Right : Ordered_Map)
        // Move key/value pairs from Right into Left, leaving Right empty,
        // replacing any pre-existing entries with the same key.

    op "+="(var Left : Ordered_Map; Right : Pair) is "|="
        // A synonym for adding a key=>value pair

    op "in"(Left : Key_Type; Right : Ordered_Map) -> Boolean
        // Return True if given key has a mapping in the Map

    op "-="(var M : Ordered_Map; Key : Key_Type)   // aka Exclude
        // Remove mapping for Right, if present

    op "index_set"(M : Ordered_Map) -> Ordered_Set<Key_Type>
        // Return set of keys with mappings

    func Keys(M : Ordered_Map) -> Ordered_Set<Key_Type> is "index_set"

    op "indexing"(ref M : Ordered_Map; Key : Key_Type) {Key in M}
      -> ref Value_Type
        // Used for references to M[Key]; requires the Key to be in M.

    op "var_indexing"(ref var M : Ordered_Map; Key : Key_Type) 
      -> ref var optional Value_Type
        // Used for assignments to M[Key]; Key is added to M if not present

    func Remove_First(var M : Ordered_Map) -> optional Pair
        // Remove mapping from the Map with lowest key value.
        // Return null if Map is empty

    func Remove_Last(var M : Ordered_Map) -> optional Pair
        // Remove mapping from the Map with highest key value.
        // Return null if Map is empty

    func Remove_Any(var M : Ordered_Map) -> optional Pair
        // Remove one mapping from the Map.  Return null if Map is empty

    func Count(M : Ordered_Map) -> Univ_Integer
        // Number of mappings in the table

    op "magnitude"(Ordered_Map) -> Univ_Integer is Count

    func Is_Empty(M : Ordered_Map) -> Boolean
        // Return True if no mappings in the table

    func Dump_Statistics(M : Ordered_Map)
      // A debugging routine to show bucket sizes of Map

end interface PSL::Containers::Ordered_Map

class PSL::Containers::Ordered_Map is
    var Items : optional AA_Tree<Pair> := []
    var Count := 0
  exports
    op "[]"() -> Ordered_Map is (Items => [])

    op "|="(var Left : Ordered_Map; Right : Pair) is
        // Add Key=>Value to Map, replacing pre-existing mapping
        // for Key, if any.
        "var_indexing"(Left, Right.Key) := Right.Value
    end op "|="

    op "|"(Left : Ordered_Map; Right : Pair) -> Result : Ordered_Map is
        // Add Key=>Value to Map, replacing pre-existing mapping
        // for Key, if any in result.
        Result := Left
        Result |= Right
    end op "|"

    op "<|="(var Left : Ordered_Map; var Right : optional Pair) is
        // Move Key/Value pair into map, leaving Right null
        "var_indexing"(Left, Right.Key) <== Right.Value
        Right := null
    end op "<|="

    op "<|="(var Left : Ordered_Map; var Right : Ordered_Map) is
        // Move key/value pairs from Right into Left, leaving Right empty,
        // replacing any pre-existing entries with the same key.
        if Left.Count == 0 then
            Left.Items <== Right.Items
            Left.Count := Right.Count
        else
            // Iterate through the tree
            loop
                // Extract element from right
                var Elem for Left := Remove_Any(Right.Items)

                if Elem is null then
                    Left.Count := Count(Left.Items)
                    return   // All done
                end if

                Left.Items <|= Elem

            end loop
        end if
    end op "<|="

    op "in"(Left : Key_Type; Right : Ordered_Map) -> Boolean is
        // Return True if given key has a mapping in the Map
        const P : Pair := (Key => Left, Value => null)
        return P in Right.Items
    end op "in"

    op "-="(var M : Ordered_Map; Key : Key_Type) is  // aka Exclude
        // Remove mapping for Right, if present
        Delete(M.Items, (Key => Key, Value => null))
        M.Count := Count(M.Items)
    end op "-="

    op "index_set"(M : Ordered_Map) -> Ordered_Set<Key_Type>
      is ([for Item in M.Items => Item.Key])
        // Return set of keys with mappings

    op "indexing"(ref M : Ordered_Map; Key : Key_Type) {Key in M}
      -> ref Value_Type is
        // Used for references to M[Key]; requires the Key to be in M.
        return Unsafe_Indexing(M.Items, (Key => Key, Value => null)).Value
    end op "indexing"

    op "var_indexing"(ref var M : Ordered_Map; Key : Key_Type) 
      -> ref var optional Value_Type is
        // Used for assignments to M[Key]; Key is added to M if not present

        if Key not in M then
            //  Insert new item with Value null
            Insert(M.Items, (Key => Key, Value => null))
            M.Count += 1
        end if

        //  Return reference to item
        return "indexing"(M, Key)
    end op "var_indexing"

    func Remove_First(var M : Ordered_Map) -> Result : optional Pair is
        // Remove mapping from the Map with lowest key value.
        // Return null if Map is empty
        Result := Remove_First(M.Items)
        if Result not null then
           M.Count -= 1
        end if
    end func Remove_First

    func Remove_Last(var M : Ordered_Map) -> Result : optional Pair is
        // Remove mapping from the Map with highest key value.
        // Return null if Map is empty
        Result := Remove_Last(M.Items)
        if Result not null then
           M.Count -= 1
        end if
    end func Remove_Last

    func Remove_Any(var M : Ordered_Map) -> Result : optional Pair is
        // Remove one mapping from the Map.  Return null if Map is empty
        Result := Remove_Any(M.Items)
        if Result not null then
           M.Count -= 1
        end if
    end func Remove_Any

    func Count(M : Ordered_Map) -> Univ_Integer is (M.Count)
        // Number of mappings in the table

    func Is_Empty(M : Ordered_Map) -> Boolean is (M.Count == 0)
        // Return True if no mappings in the table

    func Dump_Statistics(M : Ordered_Map) is (null)
      // A debugging routine to show bucket sizes of Map

end class PSL::Containers::Ordered_Map

func PSL::Test::Test_Ordered_Map() is
    var M : Ordered_Map<Univ_Integer, Univ_String> := []
    
    M |= [3 => "three"]
    M |= [1 => "one"]
    M |= [5 => "five"]

    Println("M = [" |
     (for (each [K => V] of M forward; Sep := "" then ", ") =>
        <""> | Sep | K | " => " | V) | "]")

    M |= [2 => "deux"]
    M |= [1 => "un"]
    M |= [3 => "trois"]
    M |= [5 => "cinq"]

    Println("French M = [" |
     (for (each [K => V] of M forward; Sep := "" then ", ") =>
        <""> | Sep | K | " => " | V) | "]")

    const Keys := M.Keys()

    Println("Keys of M = [" |
     (for (K in Keys forward; Sep := "" then ", ") =>
        <""> | Sep | K) | "]")

    const P4 := Prev(Keys, 4)
    const N4 := Next(Keys, 4)
    const MNL4 := Min_No_Less(Keys, 4)
    const MNG4 := Max_No_Greater(Keys, 4)

    const P3 := Prev(Keys, 3)
    const N3 := Next(Keys, 3)
    const MNL3 := Min_No_Less(Keys, 3)
    const MNG3 := Max_No_Greater(Keys, 3)

    Println("Prev(4) = " | P4 | ", Next(4) = " | N4)
    Println("Min_No_Less(4) = " | MNL4 | ", Max_No_Greater(4) = " | MNG4)
    Println("Prev(3) = " | P3 | ", Next(3) = " | N3)
    Println("Min_No_Less(3) = " | MNL3 | ", Max_No_Greater(3) = " | MNG3)
    
end func PSL::Test::Test_Ordered_Map
