interface PSL::Core::Math<> is
    type Float_Type is Univ_Real
    const Pi := 3.141592653589793
    const Two_Pi := 2.0 * Pi

    func Fact(Univ_Integer) -> Univ_Integer

    // Trig functions, given angle in radians
    func Sin(Float_Type) -> Float_Type
    func Cos(Float_Type) -> Float_Type
    func Tan(Float_Type) -> Float_Type

    //  Convert from degrees into radians
    func From_Degrees(Deg : Float_Type) 
      -> Radians : Float_Type is (Deg / 180.0 * Pi)
end interface PSL::Core::Math

class PSL::Core::Math is
    func Reduce(X : Float_Type) -> Float_Type is
        if X in -Two_Pi .. Two_Pi then
            return X
        else
            const Div := Round_To_Int (X / Two_Pi)
            return X - Two_Pi * Div
        end if
    end func Reduce

  exports
    func Fact(N : Univ_Integer) -> Univ_Integer is
        return (for I in 1 .. N => <1> * I)
    end func Fact

    // NOTE: These are accurate to only about 5 digits of precision...

    func Sin(X : Float_Type) -> Float_Type is
        const F := Reduce(X)
        return F - F**3/Fact(3) + F**5/Fact(5) - F**7/Fact(7) + F**9/Fact(9);
    end func Sin;

    func Cos(X : Float_Type) -> Float_Type is
        const F := Reduce(X)
        return 1.0 - F**2/Fact(2) + F**4/Fact(4) - F**6/Fact(6) + F**8/Fact(8);
    end func Cos;

    func Tan(F : Float_Type) -> Float_Type is
        return Sin(F) / Cos(F)
    end func Tan
end class PSL::Core::Math

func PSL::Test::Math(X, Y, Z : Univ_Real) is
    Println("X, Y, Z = " | X | ", " | Y | ", " | Z)
    Println("sin(X) = " | Math::Sin(X))
    Println("cos(Y) = " | Math::Cos(Y))
    Println("tan(Z) = " | Math::Tan(Z))
    Println("sin(X in degrees) = " | Math::Sin(Math::From_Degrees(X)))
    Println("sqrt(X) = " | Sqrt(X))
    Println("sqrt(X)**2 = " | Sqrt(X)**2)
end func PSL::Test::Math
