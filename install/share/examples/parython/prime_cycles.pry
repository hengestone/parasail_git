def Power2_Cycles(Max : Univ_Integer) :
    # Look for primes P <= Max such that 
    #   for all N in 1..P-2 => 2**N mod P != 1
    # NOTE: for all primes P => 2**(P-1) mod P == 1
    #    (according to Fermat's little theorem)
    var Mod = 3;
    while Mod <= Max :
	var I = 1;
	var Pow = 2**1;
	while Pow mod Mod != 1 :
	    I += 1;
	    Pow = (Pow * 2) mod Mod;
	end loop;
	if I == Mod-1 :
	    Print(">>>");
	end if;
	Println("  2**" | I | " mod " | Mod | " == 1");
        Mod += 2;
    end loop;
end def Power2_Cycles;
