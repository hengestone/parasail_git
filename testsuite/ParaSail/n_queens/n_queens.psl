// Example ParaSail program -- Parallel, non-recursive N_Queens solver

// Copyright (C) 2011-2014, AdaCore, New York, NY
// This program is provided "as is" with no warranty.
// Report errors at http://groups.google.com/group/parasail-programming-language
interface N_Queens <Max_N : Univ_Integer := 8> is
    // Place N queens on an NxN checkerboard so that none of them can
    // "take" each other.
    type Chess_Unit is new Integer< -Max_N*2 .. Max_N*2 >;
        // An integer type big enough represent values -Max_N*2 .. +Max_N*2
    // const Columns : Countable_Range<Chess_Unit> := 1..Max_N;
    type Row is Chess_Unit; // {Row in Rows};  // A subrange in 1..Max_N
    type Column is Chess_Unit; // {Column in Columns};  // A subrange
    type Solution is Array<optional Column, Row>;  
      // A "solution" is an array of Column's, indexed by "Row."
      // It indicates in which Column a queen of the given Row is located
      // An example solution would be:  2 8 6 1 3 5 7 4
      //   meaning that the queen in row 1 is at column 2,
      //   the queen in row 2 is at column 8, the queen in
      //   row 3 is at column 6, and so on.
     
    func Place_Queens(N : Univ_Integer := Max_N) -> Vector<Solution> 
      {for all Sol of Place_Queens => for all Col of Sol => Col not null};
        // Produce a vector of solutions, with the requirement
        // that for each solution, there are non-null column numbers
        // specified for each row of the checkerboard.
end interface N_Queens;

class N_Queens is
    type Sum_Range is Chess_Unit; // {Sum_Range in 2..2*Max_N};
        // Sum_Range is used for diagonals where the row+column is the
        // same throughout the diagonal.
    type Diff_Range is Chess_Unit; // {Diff_Range in (1-Max_N) .. (Max_N-1)};
        // Diff_Range is used for diagonals where row-column is the
        // same throughout the diagonal.
    type Sum is Countable_Set<Sum_Range>;
        // This type of set keeps track of which Sum_Range diagonals
        // have a queen on them already.
    type Diff is Countable_Set<Diff_Range>;
        // This type of set keeps track of which Diff_Range diagonals
        // have a queen on them already.

    interface Solution_State<> is
        // We build up a solution state progressively as we move
        // across the checkerboard, one column at a time.
        func Initial_State(N : Row) -> Solution_State;
        func Is_Acceptable(S : Solution_State; R : Row) -> Boolean;
          // Is_Acceptable returns True if the next queen could be
          // place in row R.
        func Current_Column(S : Solution_State) -> Column;
          // Current_Column indicates which column we are working on.
        func Next_State(S : Solution_State; R : Row) -> Solution_State;
          // Next_State returns a Solution_State produced by
          // adding a queen at (Current_Column(S), R).
        func Final_Result(S : Solution_State; R : Row) -> Solution;
          // Final_Result returns a result produced by adding a queen
          // at (Columns.Last, R) to a solution with all other columns
          // placed.
    end interface Solution_State;

    class Solution_State is
        const C : Column;    // Current column
        const Trial : Solution;  // Trial solution, some col#s still null
        const Diag_Sum : Sum;   // Set of "sum" diagonals in use
        const Diag_Diff : Diff; // Set of "diff" diagnoals in use
      exports
        func Initial_State(N : Row) -> Solution_State is
            return (C => 1, Trial => Create(1..N, null), 
              Diag_Sum => [], Diag_Diff => []);
        end func Initial_State;

        func Is_Acceptable(S : Solution_State; R : Row) -> Boolean is
          // Is_Acceptable returns True if the next queen could be
          // place in row R.
            return S.Trial[R] is null and then
              (R+S.C) not in S.Diag_Sum and then 
              (R-S.C) not in S.Diag_Diff;
        end func Is_Acceptable;
        
        func Current_Column(S : Solution_State) -> Column is
          // Current_Column indicates which column we are working on.
            return S.C;
        end func Current_Column;

        func Next_State(S : Solution_State; R : Row) -> Solution_State is
          // Next_State returns a Solution_State produced by
          // adding a queen at (Current_Column(S), R).
            return (C => S.C+1, 
              Trial     => S.Trial | [R => S.C],
              Diag_Sum  => S.Diag_Sum | (R+S.C),
              Diag_Diff => S.Diag_Diff | (R-S.C));
        end func Next_State;

        func Final_Result(S : Solution_State; R : Row) -> Solution is
          // Final_Result returns a result produced by adding a queen
          // at (Columns.Last, R) to a solution with all other columns
          // placed.
            return S.Trial | [R => S.C];
        end func Final_Result;

    end class Solution_State;

  exports
    func Place_Queens(N : Univ_Integer := Max_N) -> Vector<Solution> 
      {for all Sol of Place_Queens => for all Col of Sol => Col not null}
        // Produce a vector of solutions, with the requirement
        // that for each solution, there are non-null column numbers
        // specified for each row of the checkerboard.
    is
      const Rows : Countable_Range<Chess_Unit> := 1..N;
      var Solutions : concurrent Vector<Solution> := [];
      
     *Outer_Loop*
      for State : Solution_State := Initial_State(N) loop
          // Iterate over the columns
        
          for R in Rows concurrent loop
              // Iterate over the rows
              if Is_Acceptable(State, R) then
                  // Found a Row/Column combination that is not on any diagonal
                  // already occupied.
                  if Current_Column(State) < N then
                      // Keep going since haven't reached Nth column.
                      continue loop Outer_Loop
                        with State => Next_State(State, R);
                  else
                      // All done, remember trial result with last queen placed
                      Solutions |= Final_Result(State, R); 
                  end if;
              end if;
          end loop;
      end loop Outer_Loop;
      return Solutions;
      
    end func Place_Queens;
end class N_Queens;

func Test_N_Queens() is

    const Do_9_Queens : Boolean := #false;

    if Do_9_Queens then
        type Nine_Queens is N_Queens<9>;

        var Results9 := Nine_Queens::Place_Queens();

        Println("Number of results with 9 queens = " | Length(Results9));

        // JM: Output disabled to avoid differences between executions
        // for I in 1..Length(Results9) forward loop
        //     const Result := Results9[I];
        //     Print("Result #" | I);
        //     for J in 1..Length(Result) forward loop
        //         Print(" " | [[Result[J]]]);
        //     end loop;
        //     Print('\n');
        // end loop;
    end if;

    type Eight_Queens is N_Queens<>;

    var Results8 := Eight_Queens::Place_Queens();

    Println("Number of results with 8 queens = " | Length(Results8));
    // JM: Output disabled to avoid differences between executions
    // for I in 1..Length(Results8) forward loop
    //     const Result := Results8[I];
    //     Print("Result #" | I);
    //     for J in 1..Length(Result) forward loop
    //         Print(" " | [[Result[J]]]);
    //     end loop;
    //     Print('\n');
    // end loop;

    type Six_Queens is N_Queens<6>;

    var Results6 := Six_Queens::Place_Queens();

    Println("Number of results with 6 queens = " | Length(Results6));
    // JM: Output disabled to avoid differences between executions
    // for I in 1..Length(Results6) forward loop
    //     const Result := Results6[I];
    //     Print("Result #" | I);
    //     for J in 1..Length(Result) forward loop
    //         Print(" " | [[Result[J]]]);
    //     end loop;
    //     Print('\n');
    // end loop;

    type Four_Queens is N_Queens<4>;
    var Results4 := Four_Queens::Place_Queens();
    Println("Number of results with 4 queens = " | Length(Results4));
    // JM: Output disabled to avoid differences between executions
    // for I in 1..Length(Results4) forward loop
    //     const Result := Results4[I];
    //     Print("Result #" | I);
    //     for J in 1..Length(Result) forward loop
    //         Print(" " | [[Result[J]]]);
    //     end loop;
    //     Print('\n');
    // end loop;

end func Test_N_Queens;

func Place_Queens(N : Univ_Integer) is
    const Max := 12;
    type Solver is N_Queens<Max>;

    if N not in 1 .. Max then
        Println("Cannot handle " | N | " queens (max is " | Max | ")")
        return
    end if

    var Results := Solver::Place_Queens(N);

    Println("Number of results with " | N | " queens = " | |Results|);
    for I in 1..|Results| forward loop
        const Result := Results[I];
        Print("Result #" | I);
        for J in 1..|Result| forward loop
            Print(" " | [[Result[J]]]);
        end loop;
        Print('\n');
    end loop;
end func Place_Queens;

func main(Args : Basic_Array<Univ_String>) is
   Test_N_Queens ();
end func main;
