interface Ordered_List<Element_Type is Comparable<>> is
    // Ordered list of elements

    const Max : Univ_Integer {Max >= 0};

    func Create(Max : Univ_Integer {Max > 0}) -> Ordered_List
      {Create.Max == Max; Count(Create) == 0};

    func Count(L : Ordered_List) -> Univ_Integer
      {Count >= 0; Count <= L.Max};

    op "in"(Elem : Element_Type; L : Ordered_List) -> Boolean;

    func Insert(var L : Ordered_List; Elem : Element_Type
      {Elem not in L ==> Count(L) < L.Max})
      {Elem in L'; Count(L') == (Elem in L? Count(L): Count(L)+1)};

    func Delete(var L : Ordered_List; Elem : Element_Type)
      {Elem in L ==> Count(L') == Count(L) - 1; Elem not in L'};

    func Nth_Element(L : Ordered_List; 
      Index : Univ_Integer {Index in 1..Count(L)}) -> Element_Type;
      

end interface Ordered_List;

// Frame problem: if writable not mentioned => arbitrary effect
//                if writable is mentioned => *only* specified effects

class Ordered_List is
    // Ordered list of elements

    interface Node<> is
	const Data : Element_Type;
	var Next : optional Node;
    end interface Node;

    var Head : optional Node := null;
    var Count : Univ_Integer {Count in 0..Max};

  exports

    func Create(Max : Univ_Integer {Max > 0}) -> Ordered_List
      {Create.Max == Max; Count(Create) == 0} is
	return (Max => Max, Head => null, Count => 0);
    end func Create;

    func Count(L : Ordered_List) -> Univ_Integer
      {Count in 0..L.Max} is
	return L.Count;
    end func Count;

    op "in"(Elem : Element_Type; L : Ordered_List) -> Boolean is
	// Scan list for matching element
	for N => L.Head then N.Next while N not null loop
	    case Elem =? N.Data of
	      [#less]    => continue loop; // Keep looking
	      [#equal]   => return #true;   // Found it
	      [#greater] => return #false;  // Not there
	    end case;
        end loop;
        return #false;
    end op "in";

    func Insert(var L : Ordered_List; Elem : Element_Type
      {Elem not in L ==> Count(L) < L.Max})
      {Elem in L'; Count(L') == (Elem in L? Count(L): Count(L)+1)} is
	// Scan to find where to insert new element
	for N => L.Head then N.Next while N not null loop
	    case Elem =? N.Data of
	      [#less] => 
                if N.Next is null then
                   //  Reached the end of the list, add it here
                   N := (Data => Elem, Next <== N);
                   L.Count += 1;
                   return;
                end if;
		// Keep looking
		continue loop;
	      [#equal] => 
		// Already there
		return;
	      [#greater] => 
		// Not there; Insert element and bump the count
		N := (Data => Elem, Next => N);
		L.Count += 1;
		return;
	    end case;
        end loop;
        { L.Head is null }
        // First and only element in the list
        L.Head := (Data => Elem, Next => null);
        L.Count := 1;
    end func Insert;

    func Delete(var L : Ordered_List; Elem : Element_Type)
      {Elem in L ==> Count(L') == Count(L) - 1; Elem not in L'} is
	// Scan list for node that has a matching value
	for N => L.Head then N.Next while N not null loop
	    case Elem =? N.Data of
	      [#less] => 
		// Keep looking
		continue loop;
	      [#equal] => 
		// Found it; delete it
		N := N.Next; 
		return;
	      [#greater] => 
		// Not there
		return;
	    end case;
        end loop;
    end func Delete;

    func Nth_Element(L : Ordered_List; 
      Index : Univ_Integer {Index in 1..Count(L)}) -> Element_Type is
	for (I in 1..Index; N => L.Head then N.Next while N not null) loop
	    if I == Index then
		return N.Data;
	    end if;
	end loop;
    end func Nth_Element;
      
end class Ordered_List;

func Test_Ordered_List(X, Y, Z : Univ_Integer) is
    var L : Ordered_List<Univ_Integer> := Create(Max => 10);
    Insert(L, X);
    Insert(L, Y);
    Insert(L, Z);
    Println("List is now length = " | Count(L));
    for I in 1..Count(L) loop
	Println("Element " | I | " = " | Nth_Element(L, I));
    end loop;
end func Test_Ordered_List;

func main(Args : Basic_Array<Univ_String>) is
   Test_Ordered_List (30, 10, 20);
end func main;
