interface Vector<Element_Type is Assignable<>> is
    op "[]"() -> Vector;
    op "indexing"(ref V : Vector; Index : Univ_Integer) -> 
      ref Element_Type;
    op "var_indexing"(ref var V : Vector; Index : Univ_Integer) -> 
      ref var optional Element_Type;
	// Used for adding elements to a vector
    op "|="(var V : Vector; Elem : Element_Type);
    op "<|="(var V : Vector; var Elem : optional Element_Type);
    op "|"(Left, Right : Vector) -> Vector;
    func Length(V : Vector) -> Univ_Integer;
end interface Vector;
    
class Vector is

    const Initial_Size := 8;
    var Count : Univ_Integer := 0;
    var Data : optional Basic_Array<optional Element_Type>;

    func Expand_By_One(var V : Vector) is
	// Expand size by one
	if V.Data is null then
	    V.Data := Create(Initial_Size, null);
	elsif V.Count == Length(V.Data) then
	    // Double the size
	    var Old_Data <== V.Data;
	    V.Data := Create(2*V.Count, null);
	    for I in 1..V.Count loop
		V.Data[I] <== Old_Data[I];
	    end loop;
	    Old_Data := null;
	end if;
	V.Count += 1;
    end func Expand_By_One;
	
  exports
    op "[]"() -> Vector is
	return (Count => 0, Data => null);
    end op "[]";

    func Length(V : Vector) -> Univ_Integer is
        return V.Count;
    end func Length;

    op "indexing"(ref V : Vector; Index : Univ_Integer) -> 
      ref Element_Type is
	{Index in 1..V.Count} // Index out of bounds
	return V.Data[Index];
    end op "indexing";

    op "var_indexing"(ref var V : Vector; Index : Univ_Integer) -> 
      ref var optional Element_Type is
	// Used for adding elements to a vector
	// Add "null"s to end of Vector until big enough
	// TBD: Expand all at once to right size
	for I in V.Count+1 .. Index loop
	    V |= null;
	end loop;

	return V.Data[Index];
    end op "var_indexing";

    op "<|="(var V : Vector; var Elem : optional Element_Type) is
	Expand_By_One(V);
	V.Data[V.Count] <== Elem;
    end op "<|=";

    op "|="(var V : Vector; Elem : Element_Type) is
	Expand_By_One(V);
	V.Data[V.Count] := Elem;
    end op "|=";
    
    op "|"(Left, Right : Vector) -> Result : Vector is
	// Copy left into result, and then add in the Right elements
	if Left.Count == 0 then
	    // Left is null vector; result is determined by Right
	    Result := Right;
	else
	    // Start with Left
	    Result := Left;
	    // Assign all elements of Right into tail of Result.
	    // TBD: Would be more efficient to grow vector once and then
	    //      copy in the contents of Result.
	    for I in 1..Length(Right) forward loop
		Result |= Right[I];
	    end loop;
	end if;
    end op "|";

end class Vector;

func Test_Vector() is
    var V : Vector<Univ_Integer> := [];
    var U : Vector<Univ_Integer> := [];
    V |= 23;
    U |= 24;
    V := V | U;
    Println("V = " | V[1] | ", " | V[2]);
    for I in 1..10 loop
	V |= I;
    end loop;
    for I in 1..Length(V) forward loop
	Println("V[" | I | "] = " | V[I]);
    end loop;
    Println("\"var_indexing\"(V, 33) := 33;");
    "var_indexing"(V, 33) := 33;
    for I in 1..Length(V) forward loop
	Println("V[" | I | "] = " | V[I]);
    end loop;
end func Test_Vector;

func main(Args : Basic_Array<Univ_String>) is
   Test_Vector ();
end func main;
