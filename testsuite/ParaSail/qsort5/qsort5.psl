interface Range<Bound_Type is Countable<>> is
    // Simple contiguous range of integers (i.e. an interval)
    const First : Bound_Type;
    const Last : Bound_Type;
    op ".."(Left, Right : Bound_Type) -> Range;
    op "<.."(Left, Right : Bound_Type) -> Range;
    op "..<"(Left, Right : Bound_Type) -> Range;
    op "<..<"(Left, Right : Bound_Type) -> Range;
    op "in"(Val : Bound_Type; Int : Range) -> Boolean;
end interface Range;

class Range is
  exports
    op ".."(Left, Right : Bound_Type) -> Range is
	return (First => Left, Last => Right);
    end op "..";

    op "<.."(Left, Right : Bound_Type) -> Range is
	return (First => Left+1, Last => Right);
    end op "<..";

    op "..<"(Left, Right : Bound_Type) -> Range is
	return (First => Left, Last => Right-1);
    end op "..<";

    op "<..<"(Left, Right : Bound_Type) -> Range is
	return (First => Left+1, Last => Right-1);
    end op "<..<";

    op "in"(Val : Bound_Type; Int : Range) -> Boolean is
	return Val >= Int.First and then Val <= Int.Last;
    end op "in";
end class Range;

interface Vec_Slice<Element_Type is Assignable<>> is
  // A sliceable vector.
    type Vec_Type is Vector<Element_Type>;

    const First : Univ_Integer;
    const Last : Univ_Integer;

    func Length(V : Vec_Slice) -> Univ_Integer;
        // Return length of slice (i.e. Last - First + 1)

    op "slicing"(ref V : Vec_Type) -> ref Vec_Slice;
	// Convert a vector into a slice covering 1..Length(V)

    op "slicing"(ref V : Vec_Type; Bounds : Range<Univ_Integer>)
      -> ref Vec_Slice;
	// Slice of a vector

    op "slicing"(ref V : Vec_Slice; Bounds : Range<Univ_Integer>)
      -> ref Vec_Slice;
	// Slice of a slice

    op "indexing"(ref V : Vec_Slice; Index : Univ_Integer) 
      -> ref Vec_Type::Element_Type;
	// Index into a slice
end interface Vec_Slice;

class Vec_Slice is
    ref Vec : Vec_Type;
  exports
    func Length(V : Vec_Slice) -> Univ_Integer is
        // Return length of slice (i.e. Last - First + 1)
	return V.Last - V.First + 1;
    end func Length;

    op "slicing"(ref V : Vec_Type) -> ref Vec_Slice is
	// Convert a vector into a slice covering 1..Length(V)
	return (First => 1, Last => Length(V), Vec => V);
    end op "slicing";

    op "slicing"(ref V : Vec_Type; Bounds : Range<Univ_Integer>)
      -> ref Vec_Slice is
	// Slice of a vector
	{Bounds.First > Bounds.Last or else 
	  (Bounds.First >= 1 and then Bounds.Last <= Length(V))}
	  // slice out of bounds
	return (First => Bounds.First, Last => Bounds.Last, Vec => V);
    end op "slicing";

    op "slicing"(ref V : Vec_Slice; Bounds : Range<Univ_Integer>)
      -> ref Vec_Slice is
	// Slice of a slice
	{Bounds.First > Bounds.Last or else 
	  (Bounds.First >= V.First and then Bounds.Last <= V.Last)}
	  // slice out of bounds
	return (First => Bounds.First, Last => Bounds.Last, Vec => V.Vec);
    end op "slicing";

    op "indexing"(ref V : Vec_Slice; Index : Univ_Integer) 
      -> ref Vec_Type::Element_Type is
	// Index into a slice
	{Index >= V.First and then Index <= V.Last}
	  // "array index out of bounds, " | Index | " not in " |
	  // V.First | ".." | V.Last);
	return V.Vec[Index];
    end op "indexing";
    
end class Vec_Slice;

interface Sorting<Element_Type is Comparable<>> is
    func Quicksort(var Vec : Vector<Element_Type>);
          // Sort Arr according to the sorting op "<" which returns
          // True if Left must appear before Right in the sorted order.
          // Before returns False if Left = Right.
end interface Sorting;

class Sorting is
  exports
    func Quicksort(var Vec : Vector<Element_Type>) is
        // Handle short arrays directly.  Partition longer arrays.
	for Arr : Vec_Slice<Element_Type> => Vec[..] while Length(Arr) > 1 loop
	    if Length(Arr) == 2 then
	       if Arr[Arr.Last] < Arr[Arr.First] then
		   // Swap elements
		   Arr[Arr.First] <=> Arr[Arr.Last];
	       end if;
	    else
	       // Partition array
	       const Mid := Arr[(Arr.First + Arr.Last)/2];
	       var Left := Arr.First;
	       var Right := Arr.Last;
	       until Left > Right loop
		 var New_Left := Right+1;
		 var New_Right := Left-1;
		 block
		   // Find item in left half to swap
		   for I in Left .. Right forward loop
		       if not (Arr[I] < Mid) then
			   // Found an item that can go into right partitition
			   New_Left := I;
			   if Mid < Arr[I] then
			       // Found an item that *must* go into right part
			       exit loop;
			   end if;
		       end if;
		   end loop;
		 ||  
		   // Find item in right half to swap
		   for J in Left .. Right reverse loop
		       if not (Mid < Arr[J]) then
			   // Found an item that can go into left partitition
			   New_Right := J;
			   if Arr[J] < Mid then
			       // Found an item that *must* go into left part
			       exit loop;
			   end if;
		       end if;
		   end loop;
		 end block;
		 
		 if New_Left > New_Right then
		     // Nothing more to swap
		     // Exit loop and recurse on two partitions
		     Left := New_Left;
		     Right := New_Right;
		     exit loop;
		 end if;
		 
		 // Swap items
		 Arr[New_Left] <=> Arr[New_Right];
		 
		 // continue looking for items to swap
		 Left := New_Left + 1;
		 Right := New_Right - 1;
	       end loop;
	       
	       // At this point, "Right" is right end of left partition
	       // and "Left" is left end of right partition
	       // and the partitions don't overlap
	       // and neither is the whole array
	       // and everything in the left partition can precede Mid
	       // and everything in the right partition can follow Mid
	       // and everything between the partitions is equal to Mid.
	       {Left > Right;
		Right < Arr.Last;
		Left > Arr.First;
		(for all I in Arr.First .. Right => not (Mid < Arr[I]));
		(for all J in Left .. Arr.Last => not (Arr[J] < Mid));
		(for all K in Right+1 .. Left-1 => 
		  not (Mid < Arr[K]) and not (Arr[K] < Mid))}
	       
	     then
	       // continue with two halves in parallel
	       continue loop with Arr[Arr.First .. Right];
	     ||
	       continue loop with Arr[Left .. Arr.Last];
	    end if;
	end loop;
    end func Quicksort;
end class Sorting;

func Random(var Seed : Univ_Integer; Mult, Mod : Univ_Integer) 
  -> Univ_Integer is
    Seed := Seed * Mult mod Mod;
    return Seed;
end func Random;

func Test_Sort(Len : Univ_Integer) is
    // For Random
    const Mult := 7**5;
    const Mod := 2**31 - 1;
    var Seed := Len;
    Println("Seed = " | Seed | ", Mult = " | Mult | ", Mod = " | Mod);

    type My_Sorter is Sorting<Univ_Integer>;
    var Vec : Vector<Univ_Integer> := [];

    for I in 1..Len loop
	Vec |= Random(Seed, Mult, Mod) mod 100;
    end loop;

    var Vec2 := Vec;

    Println("Before sort, Vec = ");
    for I in 1 .. Length(Vec) forward loop
	Print(" " | Vec[I]);
	if I < Length(Vec) then
	    Print(",");
	end if;
    end loop;
    Print("\n");

    My_Sorter::Quicksort(Vec);

    Println("After sort, Vec = ");
    for I in 1 .. Length(Vec) forward loop
	Print(" " | Vec[I]);
	if I < Length(Vec) then
	    Print(",");
	end if;
    end loop;
    Print("\n");

    My_Sorter::Quicksort(Vec2);

    Println("After 2nd sort, Vec2 = ");
    for I in 1 .. Length(Vec2) forward loop
	Print(" " | Vec2[I]);
	if I < Length(Vec2) then
	    Print(",");
	end if;
    end loop;
    Print("\n");

end func Test_Sort;


func main(Args : Basic_Array<Univ_String>) is
   Test_Sort (20);
end func main;
