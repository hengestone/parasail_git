
package body Sparkel_lex is

  --  Indicates whether outdenting should expect a perfect col-count match
  Col_Match_Expected : Boolean := True;

  Max_Depth : constant := 100;
  Indent_Stack : array(Positive range 1 .. Max_Depth) of Natural :=
    (others => 0);
  Bracketing_Token_Stack : array(Positive range 1 .. Max_Depth) of Token :=
    (others => Error);

  procedure ECHO_L(YYT : String := yytext) is
  --
  -- Local version of the  define string.
  -- 
  begin
     Echo_Token (YYT);
     --  We normally expect an exact match
     Col_Match_Expected := True;
  end ECHO_L;

  function Create_Token(Text : String := yytext) return YYSType is
     Src_Pos : Source_Position := Cur_Source_Pos;
  begin
     --  Point to beginning of token
     Src_Pos.Col := Column_Number'Max (1, Src_Pos.Col - Text'Length + 1);
     --  TBD: "gcc" prefers column count rather than character count

     if Debug_Indent and then Expecting_Indent then
        Text_IO.Put (" [CT: indent off] ");
     end if;
     Expecting_Indent := False;

     --  Create a token for the parser.
     return (One_Token, Src_Pos, String_Lookup(Text));
  end Create_Token;
     
function YYLex return Token is
subtype short is integer range -32768..32767;
    yy_act : integer;
    yy_c : short;

-- returned upon end-of-file
YY_END_TOK : constant integer := 0;
YY_END_OF_BUFFER : constant := 183;
subtype yy_state_type is integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
TICK : constant := 1;
CHARLIT : constant := 2;
AFTER_IMPLEMENTS : constant := 3;
OUTDENTING : constant := 4;
RESCANNING : constant := 5;
yy_accept : constant array(0..685) of short :=
    (   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  183,  181,  171,  180,  181,  181,  181,  157,
      137,  138,  147,  148,  149,  150,  151,  152,  162,  162,
      154,  155,  141,  159,  142,  158,  160,  139,  140,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      143,  156,  145,    6,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  156,  136,  181,    6,
      177,  182,  177,  177,  177,  177,  177,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      171,  180,    0,  105,    0,  169,  169,    0,  161,  128,
      109,  124,  135,  122,  170,  123,  118,  135,  113,  125,
        0,    0,  162,    0,    0,    0,    0,    0,  153,  135,
        0,  110,    0,  108,  107,    0,  146,  104,  117,  103,
      106,    0,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,   56,  160,   59,   61,  160,  160,  160,
      160,  160,  160,  160,   71,   72,   75,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  144,  127,  121,    6,    0,    0,

        0,    0,    0,    0,  160,  160,  160,  160,  160,  160,
      160,  160,   59,  160,    6,  160,  160,  160,  160,  160,
      121,    0,    0,    6,    0,  176,    0,    0,    0,  175,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,  120,  161,  126,  170,
      116,    0,  163,  167,    0,  162,  166,    0,  115,  133,
      111,  112,  129,  119,  134,   21,   23,   24,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,   45,  160,  160,  160,   50,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   66,   68,   69,  160,   73,

      131,  160,  160,  160,  160,  160,  160,  160,  160,   86,
       87,  160,  160,  160,  160,  160,  160,  160,  160,   97,
       98,  160,  160,  160,  102,    4,    0,    0,    0,    0,
        0,   21,  160,  160,    6,  160,  160,  160,  160,  160,
       68,  160,  160,  160,    6,  160,    3,  168,    0,    0,
        0,    0,    0,    0,    0,   12,    0,    0,    0,    0,
        0,   67,    0,    0,    0,   17,    0,  164,    0,    0,
        0,  163,    0,    0,  167,    0,  162,    0,  166,    0,
        0,  114,  160,  130,  160,  160,  160,   28,   29,  160,
      160,  160,  160,  160,  160,  160,   38,   41,   39,  160,

      160,   46,  160,  160,  160,   52,  160,  160,  160,  160,
      160,  160,  160,  160,   65,   70,  160,  160,  160,  160,
      160,   80,  160,  160,  160,  160,  160,  160,   90,  160,
      160,   94,   95,  160,   99,  160,  101,  132,    0,    1,
        0,  160,  160,  160,  160,    6,  160,  160,  160,  160,
        6,  160,   94,    6,    0,    0,  174,    0,    0,    0,
        0,    0,   13,    0,    0,    0,    0,   14,    0,   93,
       16,    0,    0,    0,  163,  160,  160,   26,   27,   30,
      160,   32,  160,  160,   36,  160,    0,  160,   43,   44,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
       84,  160,  160,  160,  160,  160,   96,  100,    0,  160,
        6,  160,  160,  160,  160,  160,  160,  160,    5,    0,
      172,    0,    8,    0,    0,    0,    0,    0,    0,    0,
        0,  164,  165,    0,    0,  163,    0,  160,   25,  160,
      160,  160,  160,   37,    0,   40,  160,  160,  160,  160,
      160,   55,  160,   58,  160,   62,  160,   64,  160,   76,
      160,  160,  160,  160,  160,   83,   85,   88,  160,  160,
       92,    0,  160,  160,  160,  160,    6,  160,  160,  160,
        0,    0,    0,    0,    0,   15,    0,    0,    0,  164,

        0,    0,  160,  160,  160,  160,   35,   42,   48,   49,
       51,  160,   54,  160,  160,   63,  160,   77,  160,   79,
      160,  160,   89,   91,    0,  160,  160,   48,    6,  160,
        6,  160,    0,    0,    0,   47,   10,    0,   19,    0,
        0,  165,   22,  160,   33,   34,   53,  160,  160,   74,
       78,  160,  160,    0,    6,  160,    2,  160,  160,    0,
        7,    0,    0,    0,  165,    0,  160,  160,   60,   81,
       82,  160,    6,    6,    0,    0,   18,   11,   31,   57,
        6,    0,    9,  173,    0
    ) ;

yy_ec : constant array(ASCII.NUL..Character'Last) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   26,   26,   28,   26,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   30,   29,   29,
       31,   32,   33,    1,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   29,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   29,   59,   60,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    ) ;

yy_meta : constant array(0..61) of short :=
    (   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    4,    1,    1,    1,    5,    1,    6,    6,    1,
        1,    1,    4,    1,    1,    7,    7,    7,    8,    8,
        1,    1,    1,    9,    7,    7,    7,    7,    7,    7,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    1,
        1
    ) ;

yy_base : constant array(0..702) of short :=
    (   0,
        0,   60,  943,  942,  941,  940,  939,   61,   68,   76,
        0,  102,  947,  953,   70,  953,  923,   72,    0,  922,
      953,  953,   54,   66,  953,   68,   68,  921,  156,  160,
      131,  953,   71,   44,   82,  953,    0,  953,  953,  112,
       79,   77,   59,  146,   42,  108,  158,  117,  895,  148,
      166,   75,  888,  131,  123,  165,  121,  906,  166,  892,
      915,  162,  953,  222,  184,  166,  183,  173,  193,  195,
      200,  204,  198,  208,  199,  216,  229,  953,  906,  258,
      953,  953,    0,  891,  897,  893,  874,  897,  219,   83,
      878,  892,  224,  891,  880,  221,  886,  875,  883,  865,

      275,  953,  909,  953,  270,  953,  917,  919,    0,  953,
      898,  953,  953,  953,    0,  953,  953,  904,  897,  953,
        0,  262,  267,  269,  278,    0,  281,  301,  953,  898,
      902,  953,  900,  892,  284,  891,  953,  889,  953,  953,
      953,  889,    0,  859,  865,  871,  856,  866,  858,  867,
      852,  868,  855,  124,  860,  863,  137,  861,  266,  847,
      850,  849,  847,    0,  845,  840,    0,  846,  845,  273,
      852,  833,  835,  842,    0,  833,  862,  842,  274,  220,
      844,  835,  277,  835,  844,  838,  839,  828,  823,  836,
      823,  173,  820,  821,  953,  953,  953,    0,    0,  814,

      818,  830,  826,  807,  814,  830,  817,  825,  269,  815,
      814,  811,  806,  802,  804,  276,  281,  817,  816,  801,
      331,  844,  849,    0,  803,  953,  801,  793,  809,  953,
      795,  811,  798,  806,  794,  795,  794,  791,  786,  782,
      953,  800,  788,  796,  795,  780,  953,    0,  953,    0,
      953,  321,  320,  322,  324,  326,  798,  828,  808,  953,
      953,  953,  953,  953,  953,  776,    0,  805,  788,  783,
      788,  766,  784,  770,  294,  776,  767,  776,  776,  777,
      310,  773,  762,  766,  774,  756,  774,  771,  773,  313,
      769,  771,  763,  761,  755,    0,    0,    0,  758,  759,

      953,  762,  756,  764,  743,  283,  743,  755,  747,    0,
        0,  740,  754,  753,  738,  749,  742,  749,  744,    0,
        0,  739,  740,  742,  760,  953,  733,  348,  725,  741,
      360,  726,  726,  320,  734,  728,  738,  735,  320,  734,
      367,  728,  329,  724,    0,  728,  953,  953,  718,  723,
      372,  720,  713,  713,  727,  953,  715,  725,  722,  712,
      720,  953,  714,  330,  710,  953,  714,  349,    0,  371,
      373,  367,  378,  380,  384,  390,  392,  394,  721,  720,
      750,  953,  701,  953,  700,  703,  705,    0,    0,  696,
      693,  693,  702,  709,  708,  689,    0,    0,  241,  701,

      700,    0,  688,  691,  702,  683,  684,  699,  694,  681,
      680,  692,  676,  689,    0,    0,  679,  675,  690,  679,
      688,  683,  682,  681,  680,  667,  666,  665,    0,  657,
      675,    0,    0,  668,    0,  673,    0,  953,  663,  953,
      663,  658,  656,  653,  655,  652,  653,  652,  651,  666,
      661,  660,  412,    0,  417,  659,  953,  420,  646,  644,
      641,  643,  953,  642,  641,  640,  655,  953,  650,  953,
      953,  412,  383,  410,  414,  653,  634,    0,    0,    0,
      635,  650,  637,  632,    0,  630,  638,  640,    0,    0,
      626,  640,  626,  633,  632,  629,  627,  619,  631,  635,

      630,  630,  620,  614,  624,  619,  610,  624,  624,  622,
        0,  621,  611,  605,  607,  617,    0,    0,  603,  618,
        0,  601,  598,  607,  596,  608,  606,  609,  953,  599,
      953,  609,  953,  592,  589,  598,  587,  599,  597,  600,
      416,  418,  353,  431,  432,  422,  424,  599,    0,  584,
      587,  579,  593,    0,  591,    0,  578,  577,  590,  579,
      589,    0,  586,    0,  589,    0,  585,    0,  587,    0,
      582,  581,  580,  564,  564,    0,    0,    0,  577,  576,
        0,  561,  576,  561,  559,  573,    0,  574,  569,  554,
      567,  568,  553,  551,  565,  953,  566,  561,  546,  426,

      428,  436,  545,  558,  543,  556,    0,  953,    0,    0,
        0,  547,    0,  546,  554,    0,  543,    0,  542,    0,
      522,  530,    0,    0,  513,  505,  504,  455,    0,  495,
        0,  446,  437,  430,  443,  953,  953,  444,  953,  441,
      443,  445,    0,  431,    0,    0,    0,  424,  414,    0,
        0,  411,  366,  465,    0,  353,  953,  355,  346,  326,
      953,  279,  255,  254,  452,  454,  144,  130,    0,    0,
        0,   85,    0,    0,   65,   23,  953,  953,    0,    0,
        0,  472,  953,  953,  953,  486,  495,  504,  507,  510,
      519,  528,  532,  541,  545,  547,  554,  561,  565,  574,

      578,  583
    ) ;

yy_def : constant array(0..702) of short :=
    (   0,
      685,    1,    1,    2,    1,    2,    1,    2,  686,  686,
      687,  687,  685,  685,  685,  685,  685,  688,  689,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  690,  685,  685,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      685,  685,  685,  685,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  685,  685,  691,   64,
      685,  685,  692,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  688,  685,  685,  688,  693,  685,
      685,  685,  685,  685,  694,  685,  685,  685,  685,  685,
      695,  685,  685,  685,  685,  696,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  685,  685,  685,   64,  697,  685,

      685,  685,  685,  685,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      685,  685,  691,   80,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  693,  685,  694,
      685,  698,  685,  685,  685,  685,  699,  700,  685,  685,
      685,  685,  685,  685,  685,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      685,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  685,  685,  685,  685,  685,
      685,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  701,  698,
      698,  685,  685,  685,  685,  685,  685,  685,  699,  699,
      700,  685,  690,  685,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  685,  685,  685,
      685,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  702,  685,  685,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  685,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  685,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  702,  702,  685,  685,  690,  690,  690,
      690,  690,  690,  690,  685,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  685,  690,  690,  690,  690,  690,  690,  690,  690,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  690,  690,  690,  690,  690,  685,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  685,  690,  690,  690,  690,  690,
      690,  690,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  685,  690,  690,  685,  690,  690,  685,
      685,  685,  685,  685,  685,  685,  690,  690,  690,  690,
      690,  690,  690,  690,  685,  685,  685,  685,  690,  690,
      690,  685,  685,  685,    0,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685
    ) ;

yy_nxt : constant array(0..1014) of short :=
    (   0,
       14,   15,   16,   15,   17,   18,   19,   20,   14,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   37,   37,   37,   37,
       38,   14,   39,   14,   40,   41,   42,   43,   44,   45,
       46,   37,   47,   37,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   37,   61,   62,
       63,   64,   80,   64,   80,  111,  138,  139,  140,   79,
       82,  101,  102,  101,  106,  683,  112,  107,   82,   83,
      118,  113,  115,  119,  103,  113,  133,   83,  114,  160,
      116,  117,  134,  135,   65,  161,   66,  154,   67,   68,

       69,  155,   70,  108,  141,  142,   71,   72,   73,  179,
       84,  151,   74,   75,   85,   76,  682,  148,   84,   77,
       86,  152,   85,  149,  153,  180,  150,   87,   86,  234,
      136,  137,  128,  129,  128,   87,   88,  681,   89,  235,
       90,   91,   92,  130,   93,  131,  162,  144,   94,   95,
       96,  168,  163,  132,   97,   98,  145,   99,  146,  169,
      276,  100,  121,  147,  170,  182,  121,  189,  277,  183,
      184,  122,  190,  123,  123,  122,  185,  123,  123,  280,
      156,  680,  124,  125,  196,  126,  172,  125,  281,  127,
      157,  124,  158,  127,  125,  173,  679,  164,  125,  186,

      151,  174,  159,  165,  166,  175,  187,  192,  193,  167,
      206,  322,  126,  207,  176,  323,  177,  156,  178,  205,
      160,  197,  188,  198,  102,  198,  210,  157,  145,  208,
      146,  211,  216,  199,  164,  147,  103,  163,  214,  209,
      212,  213,  186,  175,  487,  189,  167,  173,  217,  218,
      219,  196,  215,  174,  177,  242,  178,  192,  220,  224,
      200,  224,  305,  232,  201,  188,  233,  306,  202,  238,
      239,  243,  106,  121,  203,  107,  101,  102,  101,  253,
      253,  204,  122,  488,  123,  123,  254,  254,  221,  103,
      255,  678,  255,  677,  125,  256,  256,  225,  123,  123,

      127,  108,  128,  129,  128,  125,  261,  262,  283,  294,
      303,  283,  342,  309,  284,  131,  310,  336,  285,  422,
      295,  285,  311,  305,  304,  676,  304,  368,  343,  312,
      391,  313,  347,  347,  347,  423,  369,  372,  372,  375,
      375,  256,  256,  377,  377,  392,  393,  373,  399,  440,
      440,  440,  400,  374,  371,  376,  444,  409,  373,  378,
      410,  347,  347,  347,  409,  451,  468,  448,  347,  347,
      347,  392,  393,  457,  457,  457,  472,  368,  675,  685,
      602,  452,  469,  674,  372,  372,  369,  472,  685,  543,
      474,  602,  474,  673,  373,  475,  475,  372,  372,  672,

      374,  375,  375,  671,  371,  373,  685,  375,  375,  377,
      377,  377,  377,  347,  347,  347,  545,  376,  529,  529,
      529,  531,  531,  531,  541,  378,  541,  475,  475,  542,
      542,  546,  546,  542,  542,  600,  600,  543,  685,  546,
      546,  546,  546,  600,  600,  600,  600,  547,  641,  670,
      641,  601,  669,  642,  642,  547,  657,  657,  657,  601,
      642,  642,  665,  665,  545,  685,  657,  657,  657,  665,
      665,  665,  665,  684,  684,  684,  668,  667,  666,  664,
      663,  662,  661,  660,  659,  666,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   82,   82,   82,   82,   82,

       82,   82,   82,   82,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  109,  109,  143,  143,  143,  143,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  226,  226,
      226,  658,  226,  226,  226,  226,  226,  248,  248,  248,
      248,  250,  656,  250,  250,  250,  250,  250,  250,  250,
      252,  252,  257,  257,  326,  326,  326,  655,  326,  326,
      326,  326,  326,  370,  654,  370,  370,  370,  653,  370,
      379,  379,  652,  379,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  473,  473,  544,  651,  650,  544,  544,
      649,  544,  648,  647,  646,  645,  644,  643,  640,  639,

      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  530,  528,  508,

      527,  526,  525,  524,  494,  523,  522,  521,  520,  331,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  129,  685,  380,  471,  470,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  456,  455,  454,
      453,  450,  449,  447,  446,  445,  401,  443,  442,  441,
      331,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  421,  420,  419,

      418,  417,  416,  415,  414,  413,  412,  411,  408,  407,
      406,  405,  404,  403,  402,  401,  398,  397,  396,  395,
      394,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      129,  380,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  685,  348,  346,  345,  344,  300,  341,  340,  339,
      338,  337,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  325,  324,  321,  320,  319,  318,  317,  316,  315,
      314,  308,  307,  302,  301,  300,  299,  298,  297,  296,
      293,  292,  291,  290,  289,  288,  287,  286,  282,  279,

      278,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  260,  259,  258,  113,  251,  113,
      249,  685,  105,  115,  247,  246,  245,  244,  241,  240,
      237,  236,  231,  230,  229,  228,  227,  223,  195,  194,
      191,  181,  171,  120,  110,  104,  685,   79,   79,   79,
       78,   78,   13,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685
    ) ;

yy_chk : constant array(0..1014) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    8,    2,    8,   23,   34,   34,   34,    8,
        9,   15,   15,   15,   18,  676,   23,   18,   10,    9,
       27,   24,   26,   27,   15,   24,   33,   10,   24,   45,
       26,   26,   33,   33,    2,   45,    2,   43,    2,    2,

        2,   43,    2,   18,   35,   35,    2,    2,    2,   52,
        9,   42,    2,    2,    9,    2,  675,   41,   10,    2,
        9,   42,   10,   41,   42,   52,   41,    9,   10,   90,
       33,   33,   31,   31,   31,   10,   12,  672,   12,   90,
       12,   12,   12,   31,   12,   31,   46,   40,   12,   12,
       12,   48,   46,   31,   12,   12,   40,   12,   40,   48,
      154,   12,   29,   40,   48,   54,   30,   57,  154,   54,
       55,   29,   57,   29,   29,   30,   55,   30,   30,  157,
       44,  668,   29,   29,   62,   29,   50,   30,  157,   29,
       44,   29,   44,   30,   29,   50,  667,   47,   30,   56,

       66,   50,   44,   47,   47,   51,   56,   59,   59,   47,
       66,  192,   29,   66,   51,  192,   51,   67,   51,   65,
       68,   62,   56,   64,   64,   64,   68,   67,   65,   67,
       65,   69,   73,   64,   70,   65,   64,   69,   71,   67,
       70,   70,   74,   72,  399,   75,   70,   71,   73,   74,
       75,   77,   72,   71,   72,   96,   72,   76,   76,   80,
       64,   80,  180,   89,   64,   74,   89,  180,   64,   93,
       93,   96,  105,  123,   64,  105,  101,  101,  101,  122,
      122,   64,  123,  399,  123,  123,  124,  124,   77,  101,
      125,  664,  125,  663,  123,  125,  125,   80,  127,  127,

      123,  105,  128,  128,  128,  123,  135,  135,  159,  170,
      179,  209,  216,  183,  159,  128,  183,  209,  159,  306,
      170,  209,  183,  217,  179,  662,  216,  252,  217,  183,
      275,  183,  221,  221,  221,  306,  252,  253,  253,  254,
      254,  255,  255,  256,  256,  275,  275,  253,  281,  328,
      328,  328,  281,  253,  252,  254,  334,  290,  253,  256,
      290,  331,  331,  331,  339,  343,  364,  339,  341,  341,
      341,  334,  334,  351,  351,  351,  368,  370,  660,  371,
      543,  343,  364,  659,  372,  372,  370,  368,  371,  473,
      373,  543,  373,  658,  372,  373,  373,  374,  374,  656,

      372,  375,  375,  653,  370,  372,  371,  376,  376,  377,
      377,  378,  378,  453,  453,  453,  473,  375,  455,  455,
      455,  458,  458,  458,  472,  377,  472,  474,  474,  472,
      472,  475,  475,  541,  541,  542,  542,  544,  545,  546,
      546,  547,  547,  600,  600,  601,  601,  475,  602,  652,
      602,  542,  649,  602,  602,  546,  628,  628,  628,  600,
      641,  641,  642,  642,  544,  545,  654,  654,  654,  665,
      665,  666,  666,  682,  682,  682,  648,  644,  642,  640,
      638,  635,  634,  633,  632,  665,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  690,  690,  690,  690,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  692,  692,
      692,  630,  692,  692,  692,  692,  692,  693,  693,  693,
      693,  694,  627,  694,  694,  694,  694,  694,  694,  694,
      695,  695,  696,  696,  697,  697,  697,  626,  697,  697,
      697,  697,  697,  698,  625,  698,  698,  698,  622,  698,
      699,  699,  621,  699,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  701,  701,  702,  619,  617,  702,  702,
      615,  702,  614,  612,  606,  605,  604,  603,  599,  598,

      597,  595,  594,  593,  592,  591,  590,  589,  588,  586,
      585,  584,  583,  582,  580,  579,  575,  574,  573,  572,
      571,  569,  567,  565,  563,  561,  560,  559,  558,  557,
      555,  553,  552,  551,  550,  548,  540,  539,  538,  537,
      536,  535,  534,  532,  530,  528,  527,  526,  525,  524,
      523,  522,  520,  519,  516,  515,  514,  513,  512,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  488,
      487,  486,  484,  483,  482,  481,  477,  476,  469,  467,
      466,  465,  464,  462,  461,  460,  459,  456,  452,  451,

      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      439,  436,  434,  431,  430,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  401,
      400,  396,  395,  394,  393,  392,  391,  390,  387,  386,
      385,  383,  381,  380,  379,  367,  365,  363,  361,  360,
      359,  358,  357,  355,  354,  353,  352,  350,  349,  346,
      344,  342,  340,  338,  337,  336,  335,  333,  332,  330,
      329,  327,  325,  324,  323,  322,  319,  318,  317,  316,
      315,  314,  313,  312,  309,  308,  307,  305,  304,  303,

      302,  300,  299,  295,  294,  293,  292,  291,  289,  288,
      287,  286,  285,  284,  283,  282,  280,  279,  278,  277,
      276,  274,  273,  272,  271,  270,  269,  268,  266,  259,
      258,  257,  246,  245,  244,  243,  242,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  229,  228,  227,
      225,  223,  222,  220,  219,  218,  215,  214,  213,  212,
      211,  210,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  194,  193,  191,  190,  189,  188,  187,  186,  185,
      184,  182,  181,  178,  177,  176,  174,  173,  172,  171,
      169,  168,  166,  165,  163,  162,  161,  160,  158,  156,

      155,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  142,  138,  136,  134,  133,  131,  130,  119,  118,
      111,  108,  107,  103,  100,   99,   98,   97,   95,   94,
       92,   91,   88,   87,   86,   85,   84,   79,   61,   60,
       58,   53,   49,   28,   20,   17,   13,    7,    6,    5,
        4,    3,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685
    ) ;


-- copy whatever the last rule matched to the standard output

procedure ECHO is
begin
   if (text_io.is_open(user_output_file)) then
     text_io.put( user_output_file, yytext );
   else
     text_io.put( yytext );
   end if;
end ECHO;

-- enter a start condition.
-- Using procedure requires a () after the ENTER, but makes everything
-- much neater.

procedure ENTER( state : integer ) is
begin
     yy_start := 1 + 2 * state;
end ENTER;

-- action number for EOF rule of a given start state
function YY_STATE_EOF(state : integer) return integer is
begin
     return YY_END_OF_BUFFER + state + 1;
end YY_STATE_EOF;

-- return all but the first 'n' matched characters back to the input stream
procedure yyless(n : integer) is
begin
        yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
        yy_cp := yy_bp + n;
        yy_c_buf_p := yy_cp;
        YY_DO_BEFORE_ACTION; -- set up yytext again
end yyless;

-- redefine this if you have something you want each time.
procedure YY_USER_ACTION is
begin
        null;
end;

-- yy_get_previous_state - get the state just before the EOB char was reached

function yy_get_previous_state return yy_state_type is
    yy_current_state : yy_state_type;
    yy_c : short;
    yy_bp : integer := yytext_ptr;
begin
    yy_current_state := yy_start;
    if ( yy_ch_buf(yy_bp-1) = ASCII.LF ) then
	yy_current_state := yy_current_state + 1;
    end if;

    for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
	yy_c := yy_ec(yy_ch_buf(yy_cp));
	if ( yy_accept(yy_current_state) /= 0 ) then
	    yy_last_accepting_state := yy_current_state;
	    yy_last_accepting_cpos := yy_cp;
	end if;
	while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
	    yy_current_state := yy_def(yy_current_state);
	    if ( yy_current_state >= 686 ) then
		yy_c := yy_meta(yy_c);
	    end if;
	end loop;
	yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
    end loop;

    return yy_current_state;
end yy_get_previous_state;

procedure yyrestart( input_file : file_type ) is
begin
   open_input(text_io.name(input_file));
end yyrestart;

begin -- of YYLex
<<new_file>>
        -- this is where we enter upon encountering an end-of-file and
        -- yywrap() indicating that we should continue processing

    if ( yy_init ) then
        if ( yy_start = 0 ) then
            yy_start := 1;      -- first start state
        end if;

        -- we put in the '\n' and start reading from [1] so that an
        -- initial match-at-newline will be true.

        yy_ch_buf(0) := ASCII.LF;
        yy_n_chars := 1;

        -- we always need two end-of-buffer characters.  The first causes
        -- a transition to the end-of-buffer state.  The second causes
        -- a jam in that state.

        yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
        yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

        yy_eof_has_been_seen := false;

        yytext_ptr := 1;
        yy_c_buf_p := yytext_ptr;
        yy_hold_char := yy_ch_buf(yy_c_buf_p);
        yy_init := false;
    end if; -- yy_init

    loop                -- loops until end-of-file is reached


        yy_cp := yy_c_buf_p;

        -- support of yytext
        yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
	yy_bp := yy_cp;
	yy_current_state := yy_start;
	if ( yy_ch_buf(yy_bp-1) = ASCII.LF ) then
	    yy_current_state := yy_current_state + 1;
	end if;
	loop
		yy_c := yy_ec(yy_ch_buf(yy_cp));
		if ( yy_accept(yy_current_state) /= 0 ) then
		    yy_last_accepting_state := yy_current_state;
		    yy_last_accepting_cpos := yy_cp;
		end if;
		while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
		    yy_current_state := yy_def(yy_current_state);
		    if ( yy_current_state >= 686 ) then
			yy_c := yy_meta(yy_c);
		    end if;
		end loop;
		yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
	    yy_cp := yy_cp + 1;
if ( yy_current_state = 685 ) then
    exit;
end if;
	end loop;
	yy_cp := yy_last_accepting_cpos;
	yy_current_state := yy_last_accepting_state;

<<next_action>>
	    yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

        if aflex_debug then  -- output acceptance info. for (-d) debug mode
            text_io.put( Standard_Error, "--accepting rule #" );
            text_io.put( Standard_Error, INTEGER'IMAGE(yy_act) );
            text_io.put_line( Standard_Error, "(""" & yytext & """)");
        end if;


<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
		when 0 => -- must backtrack
		-- undo the effects of YY_DO_BEFORE_ACTION
		yy_ch_buf(yy_cp) := yy_hold_char;
		yy_cp := yy_last_accepting_cpos;
		yy_current_state := yy_last_accepting_state;
		goto next_action;



-- ^[ \r\t\f]+/"queued"[ \r\t\f\n] {
--         -- ignore "queued" at start of line as far as indenting
--         ECHO_L; 
--         if Debug_Indent and then Expecting_Indent then
--            Text_IO.Put(" [queued: indent off] ");
--         end if;
--         Expecting_Indent := False;  -- "then" will turn it back on
-- }
when 1 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 3;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 50 "sparkel_lex.l"

        -- ignore "is" at start of line as far as indenting
        ECHO_L; 


when 2 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 55 "sparkel_lex.l"

        -- this keyword when used at the beginning of a line
        -- is expected to be "outdented" relative to the preceding and
        -- following construct.  We want to treat it as though it
        -- it is the same indent as the prior construct that is just slightly
        -- more indented than this keyword.
        -- However, if we are expecting an *indent* then we don't look
        -- at the stack, and just return an INDENT, while preserving
        -- the "expecting indent" flag.
        -- If not expecting an indent, then we generate zero or more
        -- OUTDENTs and one NEWLINE if it is outdented relative to
        -- the top of the indent stack.  If not outdented relative to
        -- the top of the indent stack, we don't produce anything extra.

    declare
        YYT : constant String := yytext;
        Exports_Length : constant := 7; --  "exports"'Length
    begin
        pragma Assert (Col_Count = 0);

        --  Start of line, determine indent
        ECHO_L(YYT(YYT'First .. YYT'Last - Exports_Length)); 

        --  Put "exports" back
        for I in reverse YYT'Last - Exports_Length + 1 .. YYT'Last loop
           unput(YYT(I));
        end loop;

        if Col_Count = 0 then
           ENTER(RESCANNING);
        end if;

        --  At this point, Col_Count is indent level

        if Expecting_Indent then
           yylval := Create_Token(Text => "");
           if Debug_Indent then
              Text_IO.Put_Line(" [returning INDENT] ");
              Text_IO.Flush;
           end if;
           --  Preserve indent expectation
           Expecting_Indent := True;
           return INDENT;
        elsif Top = 0 then
           --  No indents on stack yet
           --  This shouldn't happen.
           yyerror("Source file cannot start with this token");
        elsif Col_Count >= Indent_Stack(Top) then
           --  Indenting relative to remembered stack
           --  Do nothing
           null;
        elsif Top = 1 then
           --  This is unexpected; should be at least two
           --  Do nothing
           null;
        elsif Col_Count >= Indent_Stack(Top-1) then
           --  See where we stand relative to the next indent level.
           --  We are not more outdented than next level, so return NEWLINE
           yylval := Create_Token(Text => "");
           if Debug_Indent then
              Text_IO.Put_Line(" [returning NEWLINE] ");
              Text_IO.Flush;
           end if;
           return NEWLINE;
        else
           --  Outdenting relative to remembered indent;
           --  we will set Col_Match_Expected to False so we
           --  won't complain about a col-count mismatch.
           pragma Assert (Col_Count < Indent_Stack (Top-1));

           Col_Match_Expected := False;

           if Debug_Indent then
              Text_IO.Put_Line(" [entering OUTDENTING; returning NEWLINE] ");
              Text_IO.Flush;
           end if;
           ENTER(OUTDENTING);
           return NEWLINE;
        end if;
        if Debug_Indent and then Expecting_Indent then
           Text_IO.Put(" [NL: indent off] ");
        end if;
        Expecting_Indent := False;
    end;


when 3 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 141 "sparkel_lex.l"

        -- ignore "new", "then", "||" at start of line as far as indenting
        -- but return a NEWLINE if not expecting an INDENT
    declare
        YYT : constant String := yytext;
    begin

        pragma Assert (Col_Count = 0);

        for I in reverse YYT'Range loop
           if YYT(I) <= ' ' then
              --  Echo the spaces at the front of the line
              ECHO_L(YYT(YYT'First .. I));
              exit;
           end if;
           --  Unput the non-space characters
           unput(YYT(I));
        end loop;

        if Col_Count = 0 then
           --  Next time, return the token
           ENTER(RESCANNING);
        end if;

        if not Expecting_Indent then
           return NEWLINE;
        end if;
    end;


when 4 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 2;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 171 "sparkel_lex.l"

        -- Remember Expecting_Indent state, and return INDENT
        -- if expecting indent, but don't push new indent level on stack;
        -- return NEWLINE if not expecting an indent.
        Expecting_Indent_At_Label := Expecting_Indent;
        ECHO_L; 
        if Expecting_Indent then
            yylval := Create_Token(Text => "");
            if Debug_Indent then
               Text_IO.Put_Line(" [label: returning INDENT] "); Text_IO.Flush;
            end if;
            Expecting_Indent := True;
            return INDENT;
        else
            return NEWLINE;
        end if;


when 5 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 4;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 189 "sparkel_lex.l"

        -- ignore "for" after "implements" at start of line as far as indenting
        ECHO_L; 
        ENTER(CHARLIT);


when 6 => 
--# line 195 "sparkel_lex.l"

    declare
        -- ignore spaces,Carriage returns,tabs,form feeds
        -- 
        -- determine indent (expanding tabs appropriately)
        -- compare to top of indent "stack"
        -- if less, emit OUTDENTs while popping from stack until find match
        --   (except ignore such a line if it starts with 
        --     "then"/"new"/"implements"/"exports"/"||"/"*XXX*")
        --   * complain if new level does not match one already on stack
        -- if same, emit NEWLINE; leave stack as is.
        -- if indent is more than top of stack:
        --   * if prior line ends with ":", push indent on stack and emit INDENT
        --   * if prior line does *not* end with ":" do not push indent on stack

        YYT : constant String := yytext;
    begin

        pragma Assert (Col_Count = 0);

        if YYT(YYT'First) in 'a'..'z' then
           --  Indent is zero; put back characters
           for I in reverse YYT'Range loop
              unput(YYT(I));
           end loop;
           --  Next time, return the token
           ENTER(RESCANNING);
        else
           --  Start of line, determine indent
           ECHO_L; 
        end if;

        --  At this point, Col_Count is indent level

        if Top = 0 then
           --  No indents on stack yet
           Top := Top + 1;
           Indent_Stack(Top) := Col_Count;
           Bracketing_Token_Stack(Top) := Error;
           if Debug_Indent then
              Text_IO.Put_Line(" [pushing" & Integer'Image(Col_Count) &
                " at bottom of Indent_Stack] ");
              Text_IO.Flush;
           end if;
        elsif Col_Count > Indent_Stack(Top) then
           --  Indenting relative to remembered stack
           if Expecting_Indent then
              --  Indenting is only significant if
              --  preceded by ':'/is/of/then/else/loop
              Top := Top + 1;
              Indent_Stack(Top) := Col_Count;
              Bracketing_Token_Stack(Top) := Bracketing_Token;
              if Debug_Indent then
                 Text_IO.Put_Line(" [pushing" & Integer'Image(Col_Count) &
                   " on Indent_Stack] "); Text_IO.Flush;
              end if;
              yylval := Create_Token(Text => "");
              if Debug_Indent then
                 Text_IO.Put_Line(" [returning INDENT] "); Text_IO.Flush;
              end if;
              return INDENT;
           end if;
        elsif Col_Count = Indent_Stack(Top) then
           --  Same indent, this is a "significant" newline
           yylval := Create_Token(Text => "");
           if Debug_Indent then
              Text_IO.Put_Line(" [returning NEWLINE] ");
              Text_IO.Flush;
           end if;
           return NEWLINE;
        else
           --  Outdenting relative to remembered indent;
           --  we will pop indent-stack until we get a match
           pragma Assert (Col_Count < Indent_Stack (Top));

           --  tbd: convert last OUTDENT into a NEWLINE: Top := Top - 1;
           if Debug_Indent then
              Text_IO.Put_Line(" [entering OUTDENTING; returning NEWLINE] ");
              Text_IO.Flush;
           end if;
           ENTER(OUTDENTING);
           return NEWLINE;
        end if;
        if Debug_Indent and then Expecting_Indent then
           Text_IO.Put(" [NL: indent off] ");
        end if;
        Expecting_Indent := False;
    end;


when 7 => 
--# line 285 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ABSTRACT_kw);


when 8 => 
--# line 291 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CLASS_kw);


when 9 => 
--# line 297 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CONCURRENT_kw);


when 10 => 
--# line 303 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (GENERIC_kw);


when 11 => 
--# line 309 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PROTECTED_kw);


when 12 => 
--# line 315 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (END_kw);


when 13 => 
--# line 321 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (FUNC_kw);


when 14 => 
--# line 327 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PROC_kw);


when 15 => 
--# line 333 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (IMPORT_kw);


when 16 => 
--# line 339 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (WITH_kw);


when 17 => 
--# line 345 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (USE_kw);


when 18 => 
--# line 351 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (INTERFACE_kw);


when 19 => 
--# line 357 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PACKAGE_kw);


when 20 => 
--# line 363 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OP_kw);


  -- Sparkel reserved words
when 21 => 
--# line 370 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ABS_kw);


when 22 => 
--# line 375 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ABSTRACT_kw);


when 23 => 
--# line 380 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ALL_kw);


when 24 => 
--# line 385 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (AND_kw);


when 25 => 
--# line 390 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ASSERT_kw);


when 26 => 
--# line 395 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (BEGIN_kw);


when 27 => 
--# line 400 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := BLOCK_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (BLOCK_kw);


when 28 => 
--# line 410 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (BODY_kw);


when 29 => 
--# line 415 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CASE_kw);


when 30 => 
--# line 420 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CLASS_kw);


when 31 => 
--# line 425 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CONCURRENT_kw);


when 32 => 
--# line 430 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CONST_kw);


when 33 => 
--# line 435 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CONSTANT_kw);


when 34 => 
--# line 440 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (CONTINUE_kw);


when 35 => 
--# line 445 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (DECLARE_kw);


when 36 => 
--# line 450 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (DELTA_kw);


when 37 => 
--# line 455 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (DIGITS_kw);


when 38 => 
--# line 460 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (EACH_kw);


when 39 => 
--# line 465 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := ELSE_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (ELSE_kw);


when 40 => 
--# line 475 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
        yylval := Create_Token("elsif");
	yyerror("Use ""elsif"" rather than ""elseif""");
	return (ELSIF_kw);


when 41 => 
--# line 481 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
        yylval := Create_Token("elsif");
        --  Allow "elif" as an alias for "elsif" for Python-like syntax
	return (ELSIF_kw);


when 42 => 
--# line 487 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
        yylval := Create_Token("elsif");
	yyerror("Use ""elsif"" rather than ""else if""");
	return (ELSIF_kw);


when 43 => 
--# line 493 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (ELSIF_kw);


when 44 => 
--# line 498 "sparkel_lex.l"

        unput('f'); unput('i');
	ECHO_L("end"); ENTER(CHARLIT); 
        yylval := Create_Token("end");
	yyerror("Use ""end if"" rather than ""endif""");
	return (END_kw);


when 45 => 
--# line 505 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (END_kw);


when 46 => 
--# line 510 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (EXIT_kw);


when 47 => 
--# line 515 "sparkel_lex.l"

        declare
           Old_Indent : constant Boolean := Expecting_Indent;
        begin
	   ECHO_L; ENTER(CHARLIT); 
	   yylval := Create_Token;
           Expecting_Indent := Old_Indent;
           if Debug_Indent and then Expecting_Indent then
              Text_IO.Put(" [indent on] ");
           end if;
	   return (EXPORTS_kw);
        end;


when 48 => 
--# line 528 "sparkel_lex.l"

        declare
           Old_Indent : constant Boolean := Expecting_Indent;
        begin
	   ECHO_L; ENTER(CHARLIT); 
	   yylval := Create_Token;
           Expecting_Indent := Old_Indent;
           if Debug_Indent and then Expecting_Indent then
              Text_IO.Put(" [indent on] ");
           end if;
	   return (EXPORTS_kw);
        end;


when 49 => 
--# line 541 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (EXTENDS_kw);


when 50 => 
--# line 546 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (FOR_kw);


when 51 => 
--# line 551 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (FORWARD_kw);


when 52 => 
--# line 556 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (FUNC_kw);


when 53 => 
--# line 561 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (FUNC_kw);


when 54 => 
--# line 566 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (GENERIC_kw);


when 55 => 
--# line 571 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (GLOBAL_kw);


when 56 => 
--# line 576 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (IF_kw);


when 57 => 
--# line 581 "sparkel_lex.l"

	ECHO_L; ENTER(AFTER_IMPLEMENTS); 
        --  TBD: We might want to return a NEWLINE first.
	yylval := Create_Token;
	return (IMPLEMENTS_kw);


when 58 => 
--# line 587 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (IMPORT_kw);


when 59 => 
--# line 592 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (IN_kw);


when 60 => 
--# line 597 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (INTERFACE_kw);


when 61 => 
--# line 602 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := IS_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (IS_kw);


when 62 => 
--# line 612 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (LAMBDA_kw);


when 63 => 
--# line 617 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (LIMITED_kw);


when 64 => 
--# line 622 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (LOCKED_kw);


when 65 => 
--# line 627 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := LOOP_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (LOOP_kw);


when 66 => 
--# line 637 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (MOD_kw);


when 67 => 
--# line 642 "sparkel_lex.l"

        declare
           --  Preserve "Expecting_Indent" across "new"
           Old_Indent : constant Boolean := Expecting_Indent;
        begin
	   ECHO_L; ENTER(CHARLIT); 
	   yylval := Create_Token;
           Expecting_Indent := Old_Indent;
           if Debug_Indent and then Expecting_Indent then
              Text_IO.Put(" [indent on] ");
           end if;
	   return (NEW_kw);
        end;


when 68 => 
--# line 656 "sparkel_lex.l"

        declare
           --  Preserve "Expecting_Indent" across "new"
           Old_Indent : constant Boolean := Expecting_Indent;
        begin
	   ECHO_L; ENTER(CHARLIT); 
	   yylval := Create_Token;
           Expecting_Indent := Old_Indent;
           if Debug_Indent and then Expecting_Indent then
              Text_IO.Put(" [indent on] ");
           end if;
	   return (NEW_kw);
        end;


when 69 => 
--# line 670 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (NOT_kw);


when 70 => 
--# line 675 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (NULL_kw);


when 71 => 
--# line 680 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := OF_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (OF_kw);


when 72 => 
--# line 690 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OP_kw);


when 73 => 
--# line 695 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OPT_kw);


when 74 => 
--# line 700 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OPTIONAL_kw);


when 75 => 
--# line 705 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OR_kw);


when 76 => 
--# line 710 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (OTHERS_kw);


when 77 => 
--# line 715 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PACKAGE_kw);


when 78 => 
--# line 720 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PARALLEL_kw);


when 79 => 
--# line 725 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PRIVATE_kw);


when 80 => 
--# line 730 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PROC_kw);


when 81 => 
--# line 735 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PROC_kw);


when 82 => 
--# line 740 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (PROTECTED_kw);


when 83 => 
--# line 745 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (QUEUED_kw);


when 84 => 
--# line 750 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (RANGE_kw);


when 85 => 
--# line 755 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := RECORD_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (RECORD_kw);


when 86 => 
--# line 765 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (REF_kw);


when 87 => 
--# line 770 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (REM_kw);


when 88 => 
--# line 775 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (RETURN_kw);


when 89 => 
--# line 780 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (REVERSE_kw);


when 90 => 
--# line 785 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (SOME_kw);


when 91 => 
--# line 790 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (SUBTYPE_kw);


when 92 => 
--# line 795 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (TAGGED_kw);


when 93 => 
--# line 800 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := THEN_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (THEN_kw);


when 94 => 
--# line 810 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
        Bracketing_Token := THEN_kw;
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return (THEN_kw);


when 95 => 
--# line 820 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (TYPE_kw);


when 96 => 
--# line 825 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (UNTIL_kw);


when 97 => 
--# line 830 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (USE_kw);


when 98 => 
--# line 835 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (VAR_kw);


when 99 => 
--# line 840 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (WHEN_kw);


when 100 => 
--# line 845 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (WHILE_kw);


when 101 => 
--# line 850 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (WITH_kw);


when 102 => 
--# line 855 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return (XOR_kw);


  -- Match all the compound Sparkel delimiters. 
when 103 => 
--# line 862 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(COMPARE);


when 104 => 
--# line 867 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(EQ);


when 105 => 
--# line 872 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(NEQ);


when 106 => 
--# line 877 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(GEQ);


when 107 => 
--# line 882 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(LEQ);


when 108 => 
--# line 887 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(LSHIFT);


when 109 => 
--# line 892 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(POWER);


when 110 => 
--# line 897 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(ASSIGN);


when 111 => 
--# line 902 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(MOVE);


when 112 => 
--# line 907 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(SWAP);


when 113 => 
--# line 912 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(DOT_DOT);


when 114 => 
--# line 917 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(OPEN_INTERVAL);


when 115 => 
--# line 922 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(OPEN_CLOSED_INTERVAL);


when 116 => 
--# line 927 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(CLOSED_OPEN_INTERVAL);


when 117 => 
--# line 932 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(REFERS_TO);


when 118 => 
--# line 937 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(GIVES);


when 119 => 
--# line 942 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(IMPLIES);


when 120 => 
--# line 947 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(PARALLEL);


when 121 => 
--# line 952 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(PARALLEL);


when 122 => 
--# line 957 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(PLUS_ASSIGN);


when 123 => 
--# line 962 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(MINUS_ASSIGN);


when 124 => 
--# line 967 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(TIMES_ASSIGN);


when 125 => 
--# line 972 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(DIVIDE_ASSIGN);


when 126 => 
--# line 977 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(POWER_ASSIGN);


when 127 => 
--# line 982 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(COMBINE_ASSIGN);


when 128 => 
--# line 987 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(AMPERSAND_ASSIGN);


when 129 => 
--# line 992 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(COMBINE_MOVE);


when 130 => 
--# line 997 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(AND_ASSIGN);


when 131 => 
--# line 1002 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(OR_ASSIGN);


when 132 => 
--# line 1007 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(XOR_ASSIGN);


when 133 => 
--# line 1012 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(LSHIFT_ASSIGN);


when 134 => 
--# line 1017 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(RSHIFT_ASSIGN);


when 135 => 
--# line 1022 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(PLUS_BASED_OP);


  -- Match all the Sparkel single-character delimiters.
when 136 => 
--# line 1029 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return(PRIME);


when 137 => 
--# line 1034 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('(');


when 138 => 
--# line 1039 "sparkel_lex.l"

	ECHO_L; ENTER(TICK); 
	yylval := Create_Token;
	return(')');


when 139 => 
--# line 1044 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('[');


when 140 => 
--# line 1049 "sparkel_lex.l"

	ECHO_L; ENTER(TICK); 
	yylval := Create_Token;
	return(']');


when 141 => 
--# line 1054 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('<');


when 142 => 
--# line 1059 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('>');


when 143 => 
--# line 1064 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);	  
	yylval := Create_Token;
	return(L_ASSERT);  --  or L_SET in PARython mode


when 144 => 
--# line 1069 "sparkel_lex.l"
  --  Allow > ... < so PARython can use  ...  for sets/maps
	ECHO_L; ENTER(CHARLIT);	  
	yylval := Create_Token;
	return(L_ASSERT);


when 145 => 
--# line 1074 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);	  
	yylval := Create_Token;
	return(R_ASSERT);  --  or R_SET in PARython mode


when 146 => 
--# line 1079 "sparkel_lex.l"
  --  Allow > ... < so PARython can use  ...  for sets/maps
	ECHO_L; ENTER(CHARLIT);	  
	yylval := Create_Token;
	return(R_ASSERT);


when 147 => 
--# line 1084 "sparkel_lex.l"

        declare
           --  Remember Expecting_Indent
           Old_Indent : constant Boolean := Expecting_Indent;
        begin
	   ECHO_L; ENTER(CHARLIT); 
	   yylval := Create_Token;
           if Expecting_Indent_At_Label then
              if not Old_Indent then
                 --  Seen '*' twice; set Expecting_Indent back on
                 Expecting_Indent_At_Label := False;
                 Expecting_Indent := True;
                 if Debug_Indent then
                    Text_IO.Put(" [indent on] ");
                 end if;
              end if;
           end if;
	   return ('*');
        end;


when 148 => 
--# line 1104 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('+');


when 149 => 
--# line 1109 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return(',');


when 150 => 
--# line 1114 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('-');


when 151 => 
--# line 1119 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('.');


when 152 => 
--# line 1124 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('/');


when 153 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1129 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
        Bracketing_Token := ':';
        Expecting_Indent := True;
        if Debug_Indent then
           Text_IO.Put(" [indent on] ");
        end if;
	return(EOL_COLON);


when 154 => 
--# line 1139 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return(':');


when 155 => 
--# line 1144 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return(';');


when 156 => 
--# line 1149 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('|');


when 157 => 
--# line 1154 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('&');


when 158 => 
--# line 1159 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('?');


when 159 => 
--# line 1164 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT);     
	yylval := Create_Token;
	return('=');


  -- The following is used to match all valid Sparkel identifiers
  -- except reserved words. Note that leading digits and underscores
  -- are not allowed and that double underscores are not allowed.
when 160 => 
--# line 1174 "sparkel_lex.l"

	ECHO_L; ENTER(TICK);
	yylval := Create_Token;
	return(Identifier);


  -- Enumeration literals
when 161 => 
--# line 1181 "sparkel_lex.l"

	ECHO_L; ENTER(TICK);
	yylval := Create_Token;
	return(Enum_Literal);


  -- Decimal numeric literals
when 162 => 
--# line 1188 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(Integer_Literal);


when 163 => 
--# line 1194 "sparkel_lex.l"

      ECHO_L; ENTER(CHARLIT);
      yylval := Create_Token;
      return(Real_Literal);


  -- Based numeric literals.
when 164 => 
--# line 1202 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(Integer_Literal);


when 165 => 
--# line 1208 "sparkel_lex.l"

      ECHO_L; ENTER(CHARLIT);
      yylval := Create_Token;
      return(Real_Literal);


when 166 => 
--# line 1214 "sparkel_lex.l"

      ECHO_L; ENTER(CHARLIT); 
      yylval := Create_Token;
      return(Integer_Literal);


when 167 => 
--# line 1220 "sparkel_lex.l"

      ECHO_L; ENTER(CHARLIT); 
      yylval := Create_Token;
      return(Integer_Literal);


  -- Match all valid character literals.  See Ada LRM 2.6.
when 168 => 
--# line 1228 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
	yylval := Create_Token;
	return(Char_Literal);


  -- Match all valid string literals.  See Ada LRM 2.6.
when 169 => 
--# line 1236 "sparkel_lex.l"

	ECHO_L; ENTER(CHARLIT); 
        declare
           Tok : constant String := yytext;
           Quote : constant String := """";
        begin
           yylval := Create_Token (Tok);
           if Tok (Tok'Last) /= Quote(1) then
              yyerror ("unterminated string", At_Token => yylval);
           end if;
           return(String_Literal);
        end;


  -- Handle white space --
when 170 => 
--# line 1252 "sparkel_lex.l"
ECHO_L; -- ignore white space and comments to end-of-line

when 171 => 
--# line 1254 "sparkel_lex.l"

        --  Not start of line (or whole line); no need to keep track
        pragma Assert (Col_Count > 0);
        ECHO_L;


when 172 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1261 "sparkel_lex.l"

        --  Ignore outdent for these "divider" constructs
        unput(yytext(1));
        if Debug_Indent then
           Text_IO.Put_Line(" [exiting OUTDENTING] ");
           Text_IO.Flush;
        end if;
        ENTER(CHARLIT);


when 173 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1271 "sparkel_lex.l"

        --  Ignore outdent for these "divider" constructs
        unput(yytext(1));
        if Debug_Indent then
           Text_IO.Put_Line(" [exiting OUTDENTING] ");
           Text_IO.Flush;
        end if;
        ENTER(CHARLIT);


when 174 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1281 "sparkel_lex.l"

        --  Ignore outdent for these "divider" constructs
        unput(yytext(1));
        if Debug_Indent then
           Text_IO.Put_Line(" [exiting OUTDENTING] ");
           Text_IO.Flush;
        end if;
        ENTER(CHARLIT);


when 175 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1291 "sparkel_lex.l"

        --  Ignore outdent for these "divider" constructs
        unput(yytext(1));
        if Debug_Indent then
           Text_IO.Put_Line(" [exiting OUTDENTING] ");
           Text_IO.Flush;
        end if;
        ENTER(CHARLIT);


when 176 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 1301 "sparkel_lex.l"

        --  Ignore outdent for label
        unput(yytext(1));
        if Debug_Indent then
           Text_IO.Put_Line(" [exiting OUTDENTING] ");
           Text_IO.Flush;
        end if;
        ENTER(CHARLIT);


when 177 => 
--# line 1311 "sparkel_lex.l"

        --  Return another OUTDENT
        declare
           Do_Match_Check : Boolean := True;
        begin
           unput(yytext(1));
           if Top > 1 and then Col_Count < Indent_Stack(Top)
             and then (Col_Match_Expected
               or else Col_Count < Indent_Stack(Top-1))
           then
              --  Not yet reached a matching indent;
              --  Pop the stack
              if Debug_Indent then
                 Text_IO.Put_Line(" [popping" &
                   Integer'Image(Indent_Stack(Top)) &
                   " from Indent_Stack] ");
                 Text_IO.Flush;
              end if;
              Top := Top - 1;
              if Col_Count >= Indent_Stack(Top)
                or else not Col_Match_Expected
                or else Bracketing_Token_Stack(Top + 1) = ':'
                or else Bracketing_Token_Stack(Top + 1) = REFERS_TO
              then
                 --  Don't check for indent match this time;
                 --  wait til next time since only one outdent occurring,
                 --  or ":" or "=>" used at end of line (which allows multiple
                 --  outdents at a time).
                 Do_Match_Check := False;
              end if;
           end if;

           if Do_Match_Check then
              --  Found (nearly) matching indent
              if Debug_Indent then
                 Text_IO.Put_Line(" [exiting OUTDENTING] ");
                 Text_IO.Flush;
              end if;
              if Col_Count = 0 then
                 --  Return the token at the beginning of the line
                 ENTER(RESCANNING);
              else
                 ENTER(CHARLIT);
              end if;
              if Col_Count /= Indent_Stack(Top)
                and then Col_Match_Expected
              then
                 --  Not quite matching
                 Parser_Warning("indent mismatch; expected indent of" &
                   Integer'Image(Indent_Stack(Top)) & ", found" &
                   Integer'Image(Col_Count));

                 --  Force a match
                 --  TBD: Not sure this is the right choice
                 if Top = 1 then
                    Top := Top + 1;
                    if Debug_Indent then
                       Text_IO.Put_Line(" [pushing" &
                         Integer'Image(Col_Count) &
                         " on Indent_Stack to force a match] ");
                       Text_IO.Flush;
                    end if;
                 else
                    if Debug_Indent then
                       Text_IO.Put_Line(" [setting top of Indent_Stack to" &
                         Integer'Image(Col_Count) & "] "); Text_IO.Flush;
                    end if;
                 end if;
                 Indent_Stack(Top) := Col_Count;
              end if;
           end if;
           yylval := Create_Token(Text => "");
           if Do_Match_Check then
              if Debug_Indent then
                 Text_IO.Put_Line(" [returning NEWLINE after OUTDENTs] ");
                 Text_IO.Flush;
              end if;
              return NEWLINE;
           else
              if Debug_Indent then
                 Text_IO.Put_Line(" [returning OUTDENT] ");
                 Text_IO.Flush;
              end if;
              return OUTDENT;
           end if;
        end;


when YY_END_OF_BUFFER +CHARLIT + 1 
 |
YY_END_OF_BUFFER +TICK + 1 
 |
YY_END_OF_BUFFER +AFTER_IMPLEMENTS + 1 
 |
YY_END_OF_BUFFER +INITIAL + 1 
 =>
--# line 1399 "sparkel_lex.l"

        if Top = 0 then
           if Debug_Indent and then Expecting_Indent then
              Text_IO.Put(" [EOF: indent off] "); Text_IO.Flush;
           end if;
           Expecting_Indent := False;
           if Debug_Indent then
              Text_IO.Put(" [returning EOF] "); Text_IO.Flush;
           end if;
           return End_Of_Input;
        else
           unput(YY_END_OF_BUFFER_CHAR);
           Col_Count := Indent_Stack(1);
           if Debug_Indent then
              Text_IO.Put_Line(" [popping" & Integer'Image(Indent_Stack(Top)) &
                " from Indent_Stack] ");
              Text_IO.Flush;
           end if;
           Top := Top - 1;
           if Top > 0 then
              if Debug_Indent then
                 Text_IO.Put_Line(" [entering EOF OUTDENTING] ");
                 Text_IO.Flush;
              end if;
              ENTER(OUTDENTING);
           else
              --  This is a significant NEWLINE
              if Debug_Indent then
                 Text_IO.Put_Line(" [returning NEWLINE] ");
                 Text_IO.Flush;
              end if;
              yylval := Create_Token(Text => "");
              return NEWLINE;
           end if;
        end if;


when YY_END_OF_BUFFER +OUTDENTING + 1 
 =>
--# line 1436 "sparkel_lex.l"

        --  Return another OUTDENT
        unput(YY_END_OF_BUFFER_CHAR);
        if Debug_Indent then
           Text_IO.Put_Line(" [popping" & Integer'Image(Indent_Stack(Top)) &
             " from Indent_Stack] ");
           Text_IO.Flush;
        end if;
        Top := Top - 1;
        if Top = 0 then
           --  All done
           if Debug_Indent then
              Text_IO.Put_Line(" [exiting EOF OUTDENTING] ");
              Text_IO.Flush;
           end if;
           ENTER(CHARLIT);
        end if;

        yylval := Create_Token(Text => "");
        if Debug_Indent then
           Text_IO.Put_Line(" [returning EOF OUTDENT] ");
           Text_IO.Flush;
        end if;
        return OUTDENT;


  -- The following matches all new lines (and the preceding white space).
when 180 => 
--# line 1465 "sparkel_lex.l"

        --  TBD: Should we return NEWLINE if this line is entirely blank?
        if Echo_Input then
           text_io.new_line;
        end if;
        Display_Linenum;


  -- The following matches everything else and prints an error message
  -- indicating that something unexpected was found.
when 181 => 
--# line 1476 "sparkel_lex.l"
ECHO_L; 
	    yyerror("lexical error: '" &
	      Sparkel_lex_dfa.yytext & "'");


when 182 => 
--# line 1481 "sparkel_lex.l"
raise AFLEX_SCANNER_JAMMED;
when YY_END_OF_BUFFER + RESCANNING + 1 => 
    return End_Of_Input;
                when YY_END_OF_BUFFER =>
                    -- undo the effects of YY_DO_BEFORE_ACTION
                    yy_ch_buf(yy_cp) := yy_hold_char;

                    yytext_ptr := yy_bp;

                    case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                            begin
                            if ( yywrap ) then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                                yy_c_buf_p := yytext_ptr;

                                yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                                goto do_action;
                            else
                                --  start processing a new file
                                yy_init := true;
                                goto new_file;
                            end if;
                            end;
                        when EOB_ACT_RESTART_SCAN =>
                            yy_c_buf_p := yytext_ptr;
                            yy_hold_char := yy_ch_buf(yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                            yy_c_buf_p := yy_n_chars;
                            yy_current_state := yy_get_previous_state;

                            yy_cp := yy_c_buf_p;
                            yy_bp := yytext_ptr;
                            goto next_action;
                        when others => null;
                        end case; -- case yy_get_next_buffer()
                when others =>
                    text_io.put( "action # " );
                    text_io.put( INTEGER'IMAGE(yy_act) );
                    text_io.new_line;
                    raise AFLEX_INTERNAL_ERROR;
            end case; -- case (yy_act)
        end loop; -- end of loop waiting for end of file
end YYLex;
--# line 1481 "sparkel_lex.l"

end Sparkel_lex;


