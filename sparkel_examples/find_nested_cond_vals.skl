proc Find_Nested_Cond_Vals (Name : Univ_String) is

   func Starts_With (Str1, Str2 : Univ_String) return Boolean is
      return |Str1| >= |Str2| and then Str1[1..|Str2|] = Str2
   end func Starts_With

   var IO := SSL.Core.IO.Get_IO()
   var Infile := File_Input_Stream.Open (IO, Name)
   var Nesting := 0
   var Max_Nesting := 0
   var Line_Num := 0
   var Extra := 5  --  Amount of extra indent
   var Start_Line : optional Univ_String
   var Start_Line_Num : optional Univ_Integer

   loop
      var Line := Infile.Get_Line()
      exit loop when Line is null
      Line_Num += 1
      if Line_Num = 10 then
         Extra -= 1
      elsif Line_Num = 100 then
         Extra -= 1
      elsif Line_Num = 1000 then
         Extra -= 1
      elsif Line_Num = 10_000 then
         Extra -= 1
      elsif Line_Num = 100_000 then
         Extra -= 1
      end if

      if Line_Num mod 10_000 = 0 then
         Put_Line (Extra * " " & Line_Num & " reached.")
      end if
      
      if Line.Starts_With ("Conditional_Vals: Predicate") then
         if Nesting = 0 then
            --  Remember outer "start" in case there is nesting
            Start_Line := Line
            Start_Line_Num := Line_Num
         else
            --  We are nested, dump Start_Line if not already dumped
            if Start_Line not null then
               Put_Line (Extra * " " & Start_Line_Num & ": " & Line)
               --  Prevent it from being dumped again
               Start_Line := null
               Start_Line_Num := null
            end if

            Put_Line (Nesting * "*" & Extra * " " & Line_Num & ": " & Line)
         end if
         Nesting += 1
         Max_Nesting := Max (Max_Nesting, Nesting)
      elsif Line.Starts_With ("Conditional_Vals: Pred,") then
         Nesting -= 1
         if Nesting > 0 or else Start_Line is null then
            Put_Line (Nesting * "*" & Extra * " " & Line_Num & ": " & Line)
         else
            --  Set indicators back to null (just to be tidy)
            Start_Line := null
            Start_Line_Num := null
         end if
      end if
   end loop
   Put_Line ("Max Nesting = " & Max_Nesting)
end proc Find_Nested_Cond_Vals
